PrepararServidor
------------------------------------------------------
1.- Instalar Sistema Operativo Linux (Ubuntu)
2.- Actualizar reporitorios
 # apt update
3.- Instalar nvm (control de veriosnes de nodejs)
# curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
4.- forzar configuracion en bash (variable global)
# source ~/.bashrc
5.- verificar que nvm se instale correctamente (ver comandos nvm)
# nvm
6.- instalar utima version de nodejs
# nvm install node
7.- verificar que se instalara node correctamente
# node --version
8.- instalar git
# apt install git
9.- Verificar que se isntalara git correctamente
# git --version
10.- crear carpeta donde se colocara la aplicacion y acceder a ella
# mkdir solecc
# cd solecc
11.- clonar repositorio
# git clone https://github.com/LArroyoS/SoleccServer.git
12.- instalar dependencias npm
# npm i
13.- instalar de forma global pm2 (que se instale en todo el servidor)
# npm install -g pm2
14.- ejecutar aplicacion
pm2 start "npm run dev" --name solecc
15.- Permitir que pm2 se inicie automaticamente al reinicio del servidor
# pm2 startup systemd
17.- instalar servidor nginx
# apt install nginx
18.- detenet apache 2
# systemctl stop apache2.service
# systemctl disabled apache2.service
19.- Cambiar configuracion por defecto nginx
# cd
# cd /etc/nginx/sites-available
# nano default
19.1 Modificar archivo en el apartado location (redirecciona a la aplicacion correspondiente)
 location / {
  proxy_pass http://localhost:3000;
  proxy_http_version 1.1;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Conecction 'upgrade';
  proxy_set_header Host $host;
  proxy_cache_bypass $http_upgrade;
 }
 
/****************************************************
guartdar cambios: ctl+o
salir: ctl+x
/****************************************************
19.2 Verificar sintaxis de archivo
# nginx -t
20.- habilitar servicio nginx
# systemctl enable nginx.service
# systemctl start nginx.service
----------------------------------------------------------
Permitir acceso cors
Intercambio de Recursos de Origen Cruzado (CORS) es una característica de seguridad del navegador que restringe las solicitudes HTTP de origen cruzado que se inician desde secuencias de comandos que se ejecutan en el navegador. Si los recursos de la API REST reciben solicitudes HTTP complejas de varios orígenes, debe habilitar la compatibilidad con CORS.

1.- instalar cors en projecto nextjs
# npm i cors
2.- importar cors en API

import cors from "cors";

3.- definir metodos compatibles

// Initializing the cors middleware
const cors = Cors({
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'HEAD'],
})

4.- Generar encabezado CORS


// Helper method to wait for a middleware to execute before continuing
// And to throw an error when an error happens in a middleware
function runMiddleware(req, res, fn) {
    return new Promise((resolve, reject) => {
      fn(req, res, (result) => {
        if (result instanceof Error) {
          return reject(result)
        }
  
        return resolve(result)
      })
    })
}

5.- llamar a la funcion de encabezado cors antes de dar respuesta.
 
await runMiddleware(req, res, cors)

----------------------------------------------------------
Comandos pm2
pm2 list
pm2 status "appName"
pm2 restart "appName"
pm2 start "appName" o pm2 start "npm run dev" --name solecc
pm2 stop "appName"
pm2 startup systemd

/****************************************************
Para ver cambios al actualizar la carpeta de la aplicacion hay que reiniciar el servicio mediante pm2 restart
****************************************************/

-------------------------------------------------------
Manejo de servicios linux (mongodb/pm2)

systemctl status [enabled] "servicio"            Verifica el estatus del servicio
systemctl restart [enabled] "servicio"           reinicia el servicio 
systemctl start [enabled] "servicio"             inicia el servicio
systemctl stop [enabled] "servicio"              detiene el servicio

/***************************************************
Enable se coloca para permitir que el servicio se ejecute al reinicier el servidor
***************************************************/
---------------------------------------------------------
Comandos Git

Actualiza repoitorio

git fetch
git pull
/***************************************************
Se recomienda modificar los archivos de manera local y subirlos a github para actualizar mediente los siguientes comandos
****************************************************/
---------------------------------------------------------
Referencias:
Preparar servidor
https://www.youtube.com/watch?v=gmfUNDmJDuk
nvm
https://github.com/nvm-sh/nvm#installing-and-updating
-------------------------------------------------------
